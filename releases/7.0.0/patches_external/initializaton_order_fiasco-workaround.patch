#    Description                  : workaround for https://bugs.llvm.org/show_bug.cgi?id=41367
#    When Fixed in Open Source    : Needed always
#    Category                     : Bugfix
diff --git a/include/llvm/Support/ManagedStatic.h b/include/llvm/Support/ManagedStatic.h
index b4bf321..3166d59 100644
+++ b/include/llvm/Support/ManagedStatic.h
--- a/include/llvm/Support/ManagedStatic.h
@@ -17,6 +17,10 @@
 #include <atomic>
 #include <cstddef>
 
+#if !defined(_MSC_VER) || (_MSC_VER >= 1925) || defined(__clang__)
+#define LLVM_USE_CONSTEXPR_CTOR
+#endif
+
 namespace llvm {
 
 /// object_creator - Helper method for ManagedStatic.
@@ -36,21 +40,33 @@ template <typename T, size_t N> struct object_deleter<T[N]> {
 /// ManagedStaticBase - Common base class for ManagedStatic instances.
 class ManagedStaticBase {
 protected:
+#ifdef LLVM_USE_CONSTEXPR_CTOR
+  mutable std::atomic<void *> Ptr{};
+  mutable void (*DeleterFn)(void *) = nullptr;
+  mutable const ManagedStaticBase *Next = nullptr;
+#else
   // This should only be used as a static variable, which guarantees that this
   // will be zero initialized.
   mutable std::atomic<void *> Ptr;
   mutable void (*DeleterFn)(void*);
   mutable const ManagedStaticBase *Next;
-
+#endif
   void RegisterManagedStatic(void *(*creator)(), void (*deleter)(void*)) const;
 
 public:
+#ifdef LLVM_USE_CONSTEXPR_CTOR
+  constexpr ManagedStaticBase() = default;
+#endif
   /// isConstructed - Return true if this object has not been created yet.
   bool isConstructed() const { return Ptr != nullptr; }
 
   void destroy() const;
 };
 
+// we don't need LLVM_USE_CONSTEXPR_CTOR anymore as it is used only to define
+// a proper constructor and initializers
+#undef LLVM_USE_CONSTEXPR_CTOR
+
 /// ManagedStatic - This transparently changes the behavior of global statics to
 /// be lazily constructed on demand (good for reducing startup times of dynamic
 /// libraries that link in LLVM components) and for making destruction be
